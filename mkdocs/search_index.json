{
    "docs": [
        {
            "location": "/", 
            "text": "Polgraw group website\n\n\nPolgraw\n is a member of the \nVirgo\n collaboration, \nwhich aims at direct detection of gravitational waves with a kilometer-size Michelson-Morley \nlaser inteferometer. Polgraw gathers researchers from several Polish scientific institutes: \n\n\n\n\nInstitute of Mathematics, Polish Academy of Sciences\n \n\n\nAndrzej Kr\u00f3lak\n\n\n\n\n\n\nNational Center of Nuclear Research\n \n\n\nOrest Dorosh\n\n\nAdam Kutynia \n\n\nAdam Zadro\u017cny \n\n\n\n\n\n\nNicolaus Copernicus Astronomical Center, Polish Academy of Sciences\n\n\nMicha\u0142 Bejger\n\n\nPawe\u0142 Cieciel\u0105g\n\n\nMagdalena Sieniawska  \n\n\n\n\n\n\nFaculty of Physics, University of Bialystok\n \n\n\nPiotr Jaranowski \n\n\nMaciej Pi\u0119tka \n\n\nAndrzej Pisarski\n\n\n\n\n\n\nAstronomical Observatory, Warsaw University\n\n\nKrzysztof Belczy\u0144ski\n\n\nTomasz Bulik\n\n\nIzabela Kowalska\n\n\n\n\n\n\nCentre of Astronomy, Nicolaus Copernicus University in Toru\u0144\n \n\n\nKazimierz Borkowski \n\n\n\n\n\n\nInstitute of Astronomy, University of Zielona Gora\n  \n\n\nDorota Rosi\u0144ska", 
            "title": "Home"
        }, 
        {
            "location": "/#polgraw-group-website", 
            "text": "Polgraw  is a member of the  Virgo  collaboration, \nwhich aims at direct detection of gravitational waves with a kilometer-size Michelson-Morley \nlaser inteferometer. Polgraw gathers researchers from several Polish scientific institutes:    Institute of Mathematics, Polish Academy of Sciences    Andrzej Kr\u00f3lak    National Center of Nuclear Research    Orest Dorosh  Adam Kutynia   Adam Zadro\u017cny     Nicolaus Copernicus Astronomical Center, Polish Academy of Sciences  Micha\u0142 Bejger  Pawe\u0142 Cieciel\u0105g  Magdalena Sieniawska      Faculty of Physics, University of Bialystok    Piotr Jaranowski   Maciej Pi\u0119tka   Andrzej Pisarski    Astronomical Observatory, Warsaw University  Krzysztof Belczy\u0144ski  Tomasz Bulik  Izabela Kowalska    Centre of Astronomy, Nicolaus Copernicus University in Toru\u0144    Kazimierz Borkowski     Institute of Astronomy, University of Zielona Gora     Dorota Rosi\u0144ska", 
            "title": "Polgraw group website"
        }, 
        {
            "location": "/polgraw-allsky/", 
            "text": "Polgraw All-Sky Continuous Wave pipeline documentation\n\n\n\n\n\n\n\n\n\n\nTopics\n\n\n\n\nInput data generation\n \n\n\nF-statistic CW search for candidate signals\n\n\nCoincidences among candidate signals\n\n\nPipeline script\n\n\nDocuments and publications", 
            "title": "Introduction"
        }, 
        {
            "location": "/polgraw-allsky/#polgraw-all-sky-continuous-wave-pipeline-documentation", 
            "text": "", 
            "title": "Polgraw All-Sky Continuous Wave pipeline documentation"
        }, 
        {
            "location": "/polgraw-allsky/input_data/", 
            "text": "Input data generation\n\n\nextract_band\n\n\nThis code converts Short Fourier Transform Database files to time series. \n\n\nPrerequisites\n\n\nHow to run it?\n\n\n extract_band \n input_file\n\n\n\n\nwhere \ninput_file\n is an ASCII file contaning the following rows:  \n\n\n\n\nMaximal number of SFT\n\n\nThe name of the output file\n\n\nThe list of SFT files\n\n\nThe frequency band in Hz\n\n\n\n\nfor example: \n\n\n100000\nJ0034+1612_2010-10-10.out\nJ0034+1612_2010-10-10.list\n718.2480\n1\n\n\n\n\nOutput\n\n\nExample output: \n\n\n% Beginning freq- Band- Samples in one stretch- Subsampling factor- inter (overlapping, 2 if data were overlapped)- Frequency step- Scaling factor- ***The data are real and imag of the FFT\n% 908.152344 0.250000 256 8192.000000 2  0.0009766 1.000000e-20\n% FFT number in the file; Beginning mjd days; Gps s; Gps ns;\n% 100 55099.5879745370 937922816 0\n 4.59662571e+02  2.27630825e+01\n-3.50387007e+02 -2.20005558e+02\n 3.57587904e+02  1.01217077e+02\n 1.74400486e+02  2.62086552e+02\n 2.21804800e+02 -5.20278366e+02\n-3.87826732e+02 -1.55758978e+02\n\n\n\n\n\ngen2day\n description", 
            "title": "Input data generation"
        }, 
        {
            "location": "/polgraw-allsky/input_data/#input-data-generation", 
            "text": "", 
            "title": "Input data generation"
        }, 
        {
            "location": "/polgraw-allsky/input_data/#extract_band", 
            "text": "This code converts Short Fourier Transform Database files to time series.   Prerequisites  How to run it?   extract_band   input_file  where  input_file  is an ASCII file contaning the following rows:     Maximal number of SFT  The name of the output file  The list of SFT files  The frequency band in Hz   for example:   100000\nJ0034+1612_2010-10-10.out\nJ0034+1612_2010-10-10.list\n718.2480\n1  Output  Example output:   % Beginning freq- Band- Samples in one stretch- Subsampling factor- inter (overlapping, 2 if data were overlapped)- Frequency step- Scaling factor- ***The data are real and imag of the FFT\n% 908.152344 0.250000 256 8192.000000 2  0.0009766 1.000000e-20\n% FFT number in the file; Beginning mjd days; Gps s; Gps ns;\n% 100 55099.5879745370 937922816 0\n 4.59662571e+02  2.27630825e+01\n-3.50387007e+02 -2.20005558e+02\n 3.57587904e+02  1.01217077e+02\n 1.74400486e+02  2.62086552e+02\n 2.21804800e+02 -5.20278366e+02\n-3.87826732e+02 -1.55758978e+02", 
            "title": "extract_band"
        }, 
        {
            "location": "/polgraw-allsky/input_data/#gen2day-description", 
            "text": "", 
            "title": "gen2day description"
        }, 
        {
            "location": "/polgraw-allsky/search_for_candidates/", 
            "text": "F-statistic candidate signal search\n\n\nDefault (serial) version of the code for a network of detectors is available at \ngithub\n. To get it, run \ngit clone https://github.com/mbejger/polgraw-allsky.git\n. \n\n\n1. Prerequisites\n\n\nThe code is written in standard \nC\n. \nGNU Scientific Library (GSL)\n and the \nFFTW library\n (version 3.0 or later) are needed to run the code. \nGNU struct dirent\n objects are used to read the directories. \n\n\nOptionally, \nSLEEF\n or\n\nYEPPP!\n, libraries for high-performance computing that\nare optimized for speed are used to evaluate the trigonometric functions in\n\nsearch\n. These libraries are ported with the source code and are located in\n\nsrc/lib\n. The choice which of these libraries to use has to be made at compilation time by\nmodifying the \nMakefile\n. \n\n\n2. Compilation\n\n\nRun  \nmake search\n or \nmake\n (search is a default option). Resulting  binary is called \nsearch\n. \nModify the \nMakefile\n to fit your system. By default the \nYEPPP!\n library is selected. \n\n\n3. How to run the program?\n\n\nMinimal call of \nsearch\n is as follows (code compiled with the \nGNUSINCOS\n option): \n\n\n  ./search -d data_dir -o output_dir -i frame -b band  \n\n\n\n\nwhere\n\n\n\n\ndata_dir\n is the base directory of input data files,\n\n\noutput_dir\nis a directory to write the output,\n\n\nframe\n is the number of time frame to be analyzed,\n\n\nband\n is the number of the frequency band (see the \ndata structure\n description for details). \n\n\n\n\n3.1. Full list of switches\n\n\n\n\n\n\n\n\nSwitch\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-d, -data\n\n\nData directory (default is \n.\n\n\n\n\n\n\n-o, -output\n\n\nOutput directory (default is \n./candidates\n\n\n\n\n\n\n-i, -ident\n\n\nFrame number\n\n\n\n\n\n\n-b, -band\n\n\nBand number\n\n\n\n\n\n\n-l, -label\n\n\nCustom label for the input and output files\n\n\n\n\n\n\n-r, -range\n\n\nFile with grid range or pulsar position\n\n\n\n\n\n\n-c, -cwd\n\n\nChange to directory \ndir\n\n\n\n\n\n\n-t, -threshold\n\n\nThreshold for the F-statistic (default is 20)\n\n\n\n\n\n\n-h, -hemisphere\n\n\nHemisphere (default is 0 - does both)\n\n\n\n\n\n\n-p, -fpo\n\n\nReference band frequency fpo value\n\n\n\n\n\n\n-s, -dt\n\n\nData sampling time dt (default value: 0.5)\n\n\n\n\n\n\n-x, -addsig\n\n\nAdd signal with parameters from \nfile\n\n\n\n\n\n\n\n\nAlso \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--whitenoise\n\n\nwhite Gaussian noise assumed\n\n\n\n\n\n\n--nospindown\n\n\nspindowns neglected\n\n\n\n\n\n\n--nocheckpoint\n\n\nstate file will not be created (no checkpointing)\n\n\n\n\n\n\n--help\n\n\nThis help\n\n\n\n\n\n\n\n\n3.2. Network of detectors (\nmaster\n branch)\n\n\nFor the examplary input data time streams \nxdatc_001_101.bin\n provided in \ntest-data-network.tar.gz\n, the call is as follows: \n\n\nLD_LIBRARY_PATH=lib/yeppp-1.0.0/binaries/linux/x86_64 ./search -data ./test-data-network -ident 001 -band 101\n\n\n\n\nwhere the \nLD_LIBRARY_PATH\n points to the location of the \nYEPPP!\n library. \n\n\nThe program will proceed assuming that the data directory \n./test-data-network/001\n for the time frame \n001\n contain subdirectories for the network of detectors (here \nH1\n and \nV1\n) with input time series \nxdatc_001_101.bin\n and the ephemerids files \nDetSSB.bin\n in each subdirectory. The grid of parameters files is expected to be in \n./test-data-network/001/grid.bin\n. \n\n\n3.3. Network of detectors in spotlight search (\nspotlight\n branch)\n\n\nFor the \nH1L1\n network of detectors, using the \ntest-data-network-injection.tar.gz\n to search towards a pre-defined direction (spotlight search) in one 2-day segment: \n\n\nLD_LIBRARY_PATH=lib/yeppp-1.0.0/binaries/linux/x86_64 ./search -data ./test-data-network-injection -ident 205 -band 000 -spotlight ./test-data-network-injection/205/spot_J0322+0441.dat -fpo 1391.3 -label J0322+0441 -dt 2  \n\n\n\n\nThe injection corresponds to a pulsar J0322+0441. Note the differences with respect to the minimal call: \n\n\n\n\ninstead of calculating the band frequency \nfpo\n from \nband\n, we provide it directly with the \n-fpo\n switch (\n-band 000\n is invoked for legacy), \n\n\nthe input data is denoted with the pulsar label, hence the \n-label\n switch, \n\n\nthe sampling time \ndt\n is now set to \n2s\n,\n\n\n-spotlight\n switch points to the location of the spotlight file which contains the list of sky positions, and corresponding number and values of spindowns, in the following format: \n\\begin{equation} \nh\\, N_{sky}\\, m_1\\, n_1\\, N^s_{1}\\, s_{1}\\, \\dots\\, s_{N^s_1}\\, \nm_2\\, n_2\\, N^s_{2}\\, s_1\\, \\dots\\, s_{N^s_2}\\, \\dots,\n\n\\end{equation} \nwhere \n$h$\n is the hemisphere number (1 or 2), \n$N_{sky}$\n is the total number of sky positions in a given spotlight search, \n$m_i$\n and \n$n_i$\n are the sky positions in linear (grid) coordinates, \n$N^s_{i}$\n is the number of spindowns, and \n$s_{i}\\,\\dots\\, s_{N^s_i}$\n and the spindowns (in linear coordinates), corresponding to the \n$i-$\nth sky position.    \n\n\n\n\nResults are as follows: \n\n\n\n\n\n\n3.4. One-detector version\n\n\nIn the case of \none-detector\n and \ngpu-current\n versions, test data is in\n\ntest-data.tar.gz\n. \nThe directory \n001\n contains directly the \nDetSSB.bin\n, \ngrid.bin\n and \nxdatc_001_101.bin\n files. \n\n\n4. Data structure\n\n\n \nWe describe the structure using the VSR1 data as an example. \nTime of the first sample in MJD (Modified Julian Date) is 54239.00 \n(corresponding to 2007/05/18, UTC 12:00). \n\n\nIn this run the data was divided into 68 time frames, each of them 2 \nsideral  days  long, rounded to half second (172328 seconds each). \nSince we use the sampling time of \n0.5s\n, total number of data points \nin each time frame is \nN=344656\n. \n\n\nFrames are labelled with three-digit consecutive number, \nfrom \n001\n to \n068\n. Frame label is the name of a subfolder, containing \nall narrowband sequences corresponding to that frame, e.g., \n./042\n.\n\n\nBeginning MJD of each time frame is saved in the \nnnn/starting_date\n \nfile:\n\n\n   % cat 042/starting_date\n   54320.7760185185\n\n\n\n\nVSR1 database contains 929 narrow (1 Hz) bands, covering the range \n100 - 1000 Hz. Neighboring bands overlap by 0.03125 Hz. Beginning \nfrequency \nfpo\n of each band is defined as \n\n\n   fpo = 100.0 + df * bbb [Hz],\n\n\n\n\nwhere \ndf\n \n$= 1 - 2^{-5} = 0.96875$\n Hz, and \nbbb\n is the band number, \nranging from 0 to 928.\n\n\n5. Input data files\n\n\nA single run requires 2 data files for each detector \nDD\n, stored in \ndata_dir/nnn/DD\n \nsubdirectory, where \nDD\n is \nH1\n (Hanford), \nL1\n (Livingston), or \nV1\n (Virgo Cascina):\n\n\n\n\n\n\nxdat_nnn_bbb.bin\n - time-domain narrow-band data sequence, sampled\n     at  half second. \nnnn\n is the number of time frame, \nbbb\n is the\n     number of frequency band,\n\n\n\n\n\n\nDetSSB.bin\n  -  location  of  the  detector  w.r.t. the Solar\n   System Barycenter (SSB), in\n     Cartesian coordinates, sampled at half second (3dim array of size \nN\n). \n     Last two records\n     of  this file  are the angle \nphir\n, determining the  position of\n     Earth in  its diurnal motion, and the obliquity of  the ecliptic\n     \nepsm\n, both calculated for the first sample of the data,\n\n\n\n\n\n\nas we as the sky positions-frequency-spindown grid file in linear coordinates \n(common for all the detectors), stored in \ndata_dir/nnn\n: \n\n\n\n\ngrid.bin\n - generator matrix of an optimal grid of templates. \n\n\n\n\n6. Output files\n\n\nBinary output  files,   containing  trigger  events   above  an  arbitrary\nthreshold, are written to  the output_dir directory.  There are two output\nfiles for every input data sequence: \ntriggers_nnn_bbb_1.bin\n and\n\ntriggers_nnn_bbb_2.bin\n,  where  \n1\n  and  \n2\n correspond to  northern  and\nsouthern  ecliptic  hemisphere. Every trigger (candidate) event  occupies \n40\n\nconsecutive bytes (5 double numbers), with the following meaning:\n\n\n\n\n\n\n\n\nRecord no.\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\nfrequency [radians, between 0 and \n$\\pi$\n] above \nfpo\n\n\n\n\n\n\n2\n\n\nspindown [Hz s\n-1\n]\n\n\n\n\n\n\n3\n\n\ndeclination [radians]\n\n\n\n\n\n\n4\n\n\nright ascension [radians]\n\n\n\n\n\n\n5\n\n\nsignal to noise ratio\n\n\n\n\n\n\n\n\n7. Auxiliary files\n\n\nThere is a couple of auxiliary files created by the \nsearch\n \nin the working directory:\n\n\n\n\n\n\nwisdom-hostname.dat\n - \"wisdom\" file created by the \nFFTW\n. The \nhostname\n \nvariable is determined by a call to \ngethostname()\n, \n\n\n\n\n\n\nstate_nnn_bbb.dat\n - checkpoint file.  The  search can  be safely restarted, calculations will continue  from the last grid position saved to this file. After successful termination, checkpoint file is left empty.\n\n\n\n\n\n\n8. Algorithm flowchart\n\n\n\n\n\n\n9. Versions\n\n\nPolgraw-allsky code comes also as an\n\nMPI\n,\n\nnetwork of detectors spotlight\nsearch\n and a\n\nGPU\n (currently\none detector) version.", 
            "title": "Search for candidate signals"
        }, 
        {
            "location": "/polgraw-allsky/search_for_candidates/#f-statistic-candidate-signal-search", 
            "text": "Default (serial) version of the code for a network of detectors is available at  github . To get it, run  git clone https://github.com/mbejger/polgraw-allsky.git .   1. Prerequisites  The code is written in standard  C .  GNU Scientific Library (GSL)  and the  FFTW library  (version 3.0 or later) are needed to run the code.  GNU struct dirent  objects are used to read the directories.   Optionally,  SLEEF  or YEPPP! , libraries for high-performance computing that\nare optimized for speed are used to evaluate the trigonometric functions in search . These libraries are ported with the source code and are located in src/lib . The choice which of these libraries to use has to be made at compilation time by\nmodifying the  Makefile .   2. Compilation  Run   make search  or  make  (search is a default option). Resulting  binary is called  search . \nModify the  Makefile  to fit your system. By default the  YEPPP!  library is selected.   3. How to run the program?  Minimal call of  search  is as follows (code compiled with the  GNUSINCOS  option):     ./search -d data_dir -o output_dir -i frame -b band    where   data_dir  is the base directory of input data files,  output_dir is a directory to write the output,  frame  is the number of time frame to be analyzed,  band  is the number of the frequency band (see the  data structure  description for details).    3.1. Full list of switches     Switch  Description      -d, -data  Data directory (default is  .    -o, -output  Output directory (default is  ./candidates    -i, -ident  Frame number    -b, -band  Band number    -l, -label  Custom label for the input and output files    -r, -range  File with grid range or pulsar position    -c, -cwd  Change to directory  dir    -t, -threshold  Threshold for the F-statistic (default is 20)    -h, -hemisphere  Hemisphere (default is 0 - does both)    -p, -fpo  Reference band frequency fpo value    -s, -dt  Data sampling time dt (default value: 0.5)    -x, -addsig  Add signal with parameters from  file     Also            --whitenoise  white Gaussian noise assumed    --nospindown  spindowns neglected    --nocheckpoint  state file will not be created (no checkpointing)    --help  This help     3.2. Network of detectors ( master  branch)  For the examplary input data time streams  xdatc_001_101.bin  provided in  test-data-network.tar.gz , the call is as follows:   LD_LIBRARY_PATH=lib/yeppp-1.0.0/binaries/linux/x86_64 ./search -data ./test-data-network -ident 001 -band 101  where the  LD_LIBRARY_PATH  points to the location of the  YEPPP!  library.   The program will proceed assuming that the data directory  ./test-data-network/001  for the time frame  001  contain subdirectories for the network of detectors (here  H1  and  V1 ) with input time series  xdatc_001_101.bin  and the ephemerids files  DetSSB.bin  in each subdirectory. The grid of parameters files is expected to be in  ./test-data-network/001/grid.bin .   3.3. Network of detectors in spotlight search ( spotlight  branch)  For the  H1L1  network of detectors, using the  test-data-network-injection.tar.gz  to search towards a pre-defined direction (spotlight search) in one 2-day segment:   LD_LIBRARY_PATH=lib/yeppp-1.0.0/binaries/linux/x86_64 ./search -data ./test-data-network-injection -ident 205 -band 000 -spotlight ./test-data-network-injection/205/spot_J0322+0441.dat -fpo 1391.3 -label J0322+0441 -dt 2    The injection corresponds to a pulsar J0322+0441. Note the differences with respect to the minimal call:    instead of calculating the band frequency  fpo  from  band , we provide it directly with the  -fpo  switch ( -band 000  is invoked for legacy),   the input data is denoted with the pulsar label, hence the  -label  switch,   the sampling time  dt  is now set to  2s ,  -spotlight  switch points to the location of the spotlight file which contains the list of sky positions, and corresponding number and values of spindowns, in the following format: \n\\begin{equation} \nh\\, N_{sky}\\, m_1\\, n_1\\, N^s_{1}\\, s_{1}\\, \\dots\\, s_{N^s_1}\\, \nm_2\\, n_2\\, N^s_{2}\\, s_1\\, \\dots\\, s_{N^s_2}\\, \\dots, \n\\end{equation} \nwhere  $h$  is the hemisphere number (1 or 2),  $N_{sky}$  is the total number of sky positions in a given spotlight search,  $m_i$  and  $n_i$  are the sky positions in linear (grid) coordinates,  $N^s_{i}$  is the number of spindowns, and  $s_{i}\\,\\dots\\, s_{N^s_i}$  and the spindowns (in linear coordinates), corresponding to the  $i-$ th sky position.       Results are as follows:", 
            "title": "F-statistic candidate signal search"
        }, 
        {
            "location": "/polgraw-allsky/coincidences/", 
            "text": "Coincidences between candidates\n\n\nIn order to establish the probability of detection of a real gravitational wave, after finding the candidate signals with the \nF-statistic candidate signal search\n, the pipeline searches for coincidences between candidates found in different time frames. \n\n\n0. Description of how the coincidences are done\n\n\nBrief description about the idea behind the coincidences\n\n\n1. Prerequisites\n\n\nPascal compiler (\nFreePascal\n). \n\n\n2. Compilation\n\n\nCurrent version of the coincidence code \ncoiproc\n is written in Pascal \nand is compiled with \nFreePascal\n v2.6.0. \nIt uses the following auxiliary modules: \ngwau\n, \ncncdu\n, \nsortdc\n, \nvsr1unit\n and \nprecalc\n.\n\n\n3. How to run the program?\n\n\nThe call is  \n\n\n ./coiproc [options] list_file\n\n\n\n\nwhere \nlist_file\n is a list of trigger files containing candidates (from one hemisphere). \nAvailable \n[options]\n are\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-scale_f \nvalue\n\n\nscaling cell in f-direction size by \nvalue\n\n\n\n\n\n\n-scale_s \nvalue\n\n\nscaling cell in s-direction size by \nvalue\n\n\n\n\n\n\n-scale_a \nvalue\n\n\nscaling cell in a-direction size by \nvalue\n\n\n\n\n\n\n-scale_d \nvalue\n\n\nscaling cell in d-direction size by \nvalue\n\n\n\n\n\n\n-threshold \nvalue\n minimal coincidence number to consider\n\n\n\n\n\n\n\n\n-f\n\n\nshift of cells in x1 direction\n\n\n\n\n\n\n-s\n\n\nshift of cells in x2 direction\n\n\n\n\n\n\n-a\n\n\nshift of cells in x3 direction\n\n\n\n\n\n\n-d\n\n\nshift of cells in x4 direction\n\n\n\n\n\n\n-nocorrectfreq\n\n\ndo not correct frequency to the reference time frame (default is \n68\n\n\n\n\n\n\n-refr \nvalue\n\n\nset the reference time frame to \nvalue\n\n\n\n\n\n\n-shift \ndddd\n\n\nset shift in direction \ndddd\n(\nd\ncan be 0 or 1) (default \n0000\n\n\n\n\n\n\n-fpo \nvalue\n\n\nset \nvalue\nof the reference band frequency \nfpo\nto \nvalue\n\n\n\n\n\n\n\n\n4. Example using the VSR1 data\n\n\nExample call: \n\n\n ./coiproc sht_016_1.list\n\n\n\n\nwhere the list \nsht_016_1.list\n contains the list of candidate (trigger) files. Note that \nthe candidate binary files \npvc_trig_timeframe_band_hemisphere.bin\n have different \nnames than the trigger files produced by the \nsearch\n code. The original files are vetoed. \n\n\n  ./01/pvc_trig_01_016_1.bin\n  ./02/pvc_trig_02_016_1.bin\n  ./03/pvc_trig_03_016_1.bin\n  ./04/pvc_trig_04_016_1.bin\n  ./08/pvc_trig_08_016_1.bin\n  ./11/pvc_trig_11_016_1.bin\n  ./17/pvc_trig_17_016_1.bin\n  ./26/pvc_trig_26_016_1.bin\n  ./50/pvc_trig_50_016_1.bin\n  ./63/pvc_trig_63_016_1.bin\n  ./67/pvc_trig_67_016_1.bin\n  ./03/pvc_trig_03_017_1.bin\n  ./04/pvc_trig_04_017_1.bin\n  ./08/pvc_trig_08_017_1.bin\n  ./10/pvc_trig_10_017_1.bin\n  ./11/pvc_trig_11_017_1.bin\n  ./15/pvc_trig_15_017_1.bin\n  ./17/pvc_trig_17_017_1.bin\n  ./30/pvc_trig_30_017_1.bin\n  ./32/pvc_trig_32_017_1.bin\n  ./33/pvc_trig_33_017_1.bin\n  ./36/pvc_trig_36_017_1.bin\n  ./37/pvc_trig_37_017_1.bin\n  ./40/pvc_trig_40_017_1.bin\n  ./46/pvc_trig_46_017_1.bin\n  ./47/pvc_trig_47_017_1.bin\n  ./50/pvc_trig_50_017_1.bin\n  ./51/pvc_trig_51_017_1.bin\n  ./52/pvc_trig_52_017_1.bin\n  ./53/pvc_trig_53_017_1.bin\n  ./58/pvc_trig_58_017_1.bin\n  ./60/pvc_trig_60_017_1.bin\n  ./61/pvc_trig_61_017_1.bin\n\n\n\nResults are saved into ASCII text files \nxxxx_fff_h.resf\n, where \nxxxx\n is a\nvector in the \nx1-x2-x3-x4\n parameter space (for example \n1001\n means shift in x1\nand x4 directions). An intermediate, auxiliary output file is \nxxxx_fff_h.txt\n.\n\nThe \n0000_016_1.txt\n file contains \n\n\n%*   File name                   size\n%\n  pvc_trig_01_016_1.bin          20888\n%\n  pvc_trig_02_016_1.bin            262\n%\n  pvc_trig_03_016_1.bin           2572\n%\n  pvc_trig_03_017_1.bin           3023\n%\n  pvc_trig_04_016_1.bin           2248\n%\n  pvc_trig_04_017_1.bin           3047\n%\n  pvc_trig_08_016_1.bin           1538\n%\n  pvc_trig_08_017_1.bin            730\n%\n  pvc_trig_10_017_1.bin           3626\n%\n  pvc_trig_11_016_1.bin           3260\n%\n  pvc_trig_11_017_1.bin           2598\n%\n  pvc_trig_15_017_1.bin           2672\n%\n  pvc_trig_17_016_1.bin           2722\n%\n  pvc_trig_17_017_1.bin           2503\n%\n  pvc_trig_26_016_1.bin          10449\n%\n  pvc_trig_30_017_1.bin          10599\n%\n  pvc_trig_32_017_1.bin           1828\n%\n  pvc_trig_33_017_1.bin           3896\n%\n  pvc_trig_36_017_1.bin           2429\n%\n  pvc_trig_37_017_1.bin           1031\n%\n  pvc_trig_40_017_1.bin           9049\n%\n  pvc_trig_46_017_1.bin           7259\n%\n  pvc_trig_47_017_1.bin           2632\n%\n  pvc_trig_50_016_1.bin           8982\n%\n  pvc_trig_50_017_1.bin           6457\n%\n  pvc_trig_51_017_1.bin           1874\n%\n  pvc_trig_52_017_1.bin            466\n%\n  pvc_trig_53_017_1.bin           1023\n%\n  pvc_trig_58_017_1.bin           3542\n%\n  pvc_trig_60_017_1.bin           7172\n%\n  pvc_trig_61_017_1.bin           6163\n%\n  pvc_trig_63_016_1.bin            904\n%\n  pvc_trig_67_016_1.bin             36\n% Shift in dimentions = (0, 0, 0, 0)\n% Number of files : 33\n% Correct frequency : TRUE\n% Frequency band (in Hz) [115.50, 116.47]\n% Scaling values = (64.00, 8.00, 4.00, 4.00)\n% Max value = 3\n% Max coincidence/file number = 9.09%\n% Threshold value = 3\n% Statistic of coincidences \n%   term    band  hemsph      in       coinc     unique\n       1      16       1     20888         1     12713\n       2      16       1       262         0       154\n       3      16       1      2572         0      2553\n       3      17       1      3023         0        76\n       4      16       1      2248         0      2071\n       4      17       1      3047         0       146\n       8      16       1      1538         1      1517\n       8      17       1       730         0       111\n      10      17       1      3626         0       210\n      11      16       1      3260         0      1572\n      11      17       1      2598         0       158\n      15      17       1      2672         0       137\n      17      16       1      2722         1      2638\n      17      17       1      2503         0        52\n      26      16       1     10449         2     10181\n      30      17       1     10599         0        66\n      32      17       1      1828         0        15\n      33      17       1      3896         0       126\n      36      17       1      2429         0        91\n      37      17       1      1031         0        35\n      40      17       1      9049         0      1069\n      46      17       1      7259         0       498\n      47      17       1      2632         0       192\n      50      16       1      8982         1      8480\n      50      17       1      6457         0       140\n      51      17       1      1874         0       270\n      52      17       1       466         0         5\n      53      17       1      1023         0        17\n      58      17       1      3542         0        30\n      60      17       1      7172         0       204\n      61      17       1      6163         0       215\n      63      16       1       904         0       834\n      67      16       1        36         0        32\n\n\n\nThe file \n0000_016_1.resf\n contains the following (if \n-binary\n switch is not set): \n\n\n% Shift in dimensions = (0, 0, 0, 0)\n% Number of files : 33\n% Correct frequency : TRUE\n% Scaling value = (64.00, 8.00, 4.00, 4.00)\n% Max value = 3\n% Max coincidence/file number = 9.09%\n% Threshold value = 3\n% Frequency band (in Hz) [115.50, 116.47]\n%     frel      sdnl      decl      ascl    term    band   hmsph    position       SNR     f_corrected\n    -21575     -2835        -1         0       1      16       1        3277       6.10     115.777611\n    -21575     -2835        -1         0      17      16       1        1452       6.21     115.781075\n    -21575     -2835        -1         0      26      16       1        8694       6.33     115.781662\n    -10276     -1349        -1         1       8      16       1         940       6.02     115.629623\n    -10276     -1349        -1         1      26      16       1        5057       6.28     115.628441\n    -10276     -1349        -1         1      50      16       1        5874       6.03     115.626526\n\n \n\n\nThe file \n0000_016_1.resf\n contains the following (if \n-binary\n switch is set): \n\n\n% Shift in dimensions = (0, 0, 0, 0)\n% Number of files : 33\n% Correct frequency : TRUE\n% Scaling value = (64.00, 8.00, 4.00, 4.00)\n% Max value = 3\n% Max coincidence/file number = 9.09%\n% Threshold value = 3\n% Frequency band (in Hz) [115.50, 116.47]\n% Data of coincidences are in binary file 0000_016_1.coi\n\n\n\nMissing: description of \n.coi\n file format.\n\n\n5. Programs ran before and after \ncoiproc\n (veto etc.)\n\n\n6. Coincidences code in \nC\n (under development)\n\n\nA version of the coincidences code written in \nC\n, currently in testing phase, is available at \ngithub\n. To get it, run \ngit clone https://github.com/mbejger/polgraw-allsky.git\n.\n\n\nPrerequisites\n\n\nThe code is written in standard \nC\n. The only dependency is \nGNU Scientific Library (GSL)\n, used to manipulate the Fisher matrix (calculate the eigenvectors and eigenvalues). \nGNU struct dirent\n objects are used to read the directories. \n\n\nThe idea behind coincidences\n\n\nAfter finding the candidate signals in different time frames (\nsearch\n), we want to confirm the existence of signals with the same parameters along the span of time segments. to further perform a validation search for high-coincidence, or otherwise interesting candidates (3rd stage, to be done). To do this, the candidates from a list of trigger files (time frames) are read, and for each trigger file\n\n\n\n\na candidate is transformed to a defined time moment (frequency shifted to a reference frame), \n\n\ntranslated into linear (integer) coordinates, \n\n\nduplicates within each frame are removed, \n\n\nlist of unique candidates from all the frames is created and sorted, \n\n\nduplicates are counted - these are the coincidences. \n\n\n\n\n[-x----][-x----][-w----][-x----][-----t][-x----][-x----][---f--]\n5 coincidences of x in 8 data segments, not bad...\n\n\n\n\nTODO: describe cell shifts (16 different shifts in total: 0101, 0110, 0010 etc. in f, s, d, a directions) and scaling of cells (used to define the linear parameters for a given cell to subsequently compare the candidate values)\n \n\n\n7. Compilation\n\n\nRun  \nmake coincidences\n. Resulting binary is called \ncoincidences\n. Modify the \nMakefile\n to fit your system. By default the \nYEPPP!\n library is selected, but \ncoincidences\n does not need it (select \nGNUSINCOS\n, for example). \n\n\n8. How to run the program?\n\n\nSample call of \ncoincidences\n is as follows (code compiled with the \nGNUSINCOS\n option):\n\n\n ./coincidences -data ./triggers_J0154+2706 -trigname J0154+2706 -refloc ./coinc-testdata -fpo 687.656250 -shift 0010 -scale 4844 -refr 100 -dt 2 -mincoin 15 -output results -narrowdown 0.2\n\n\n\n\n8.1. Full list of switches\n\n\nType \n\n\n ./coincidences --help \n\n\n\n\nto obtain the following description: \n\n\n\n\n\n\n\n\nSwitch\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-data\n\n\nData directory (default is \n./candidates\n\n\n\n\n\n\n-output\n\n\nOutput directory (default is \n./coinc-results\n\n\n\n\n\n\n-shift\n\n\nCell shifts in \nfsda\ndirections (4 digit number, e.g. \n0101\n default \n0000\n\n\n\n\n\n\n-scale\n\n\nCell scaling in \nfsda\ndirections (4 digit number, e.g. \n4824\n default \n1111\n\n\n\n\n\n\n-refr\n\n\nReference frame number\n\n\n\n\n\n\n-fpo\n\n\nReference band frequency \nfpo\nvalue\n\n\n\n\n\n\n-dt\n\n\nData sampling time dt (default value: \n0.5\n\n\n\n\n\n\n-trigname\n\n\nPart of triggers name (for identifying files)\n\n\n\n\n\n\n-refloc\n\n\nLocation of the reference grid.bin and starting_date files\n\n\n\n\n\n\n-mincoin\n\n\nMinimal number of coincidences recorded\n\n\n\n\n\n\n-narrowdown\n\n\nNarrow-down the frequency band (range [0,1], +- around center)\n\n\n\n\n\n\n\n\nAlso\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--help\n\n\nThis help\n\n\n\n\n\n\n\n\n9. Output\n\n\nOutput to the screen (\nstdout\n) in the case of \n\n\n ./coincidences -data ./triggers_J0154+2706 -trigname J0154+2706 -refloc ./coinc-testdata -fpo 687.656250 -shift 0010 -scale 4844 -refr 100 -dt 2 -mincoin 15 -output results -narrowdown 0.2\n\n\n\n\nis\n\n\nReading the reference grid.bin at ./coinc-testdata\nfftpad from the grid file: 1\nSettings dt: 2.000000, oms: 8641.343293\nReference frame number: 100\nCell shifts  in f, s, d, a directions: 0 0 1 0 \nCell scaling in f, s, d, a directions: 4 8 4 4\nReading triggers_090_000_J0154+2706_1.bin... Frame 90: 3765/7533\nReading triggers_178_000_J0154+2706_1.bin... Frame 178: 10934/15676\nReading triggers_055_000_J0154+2706_1.bin... Frame 55: 4045/4568\nReading triggers_186_000_J0154+2706_1.bin... Frame 186: 27045/39588\nReading triggers_066_000_J0154+2706_1.bin... Frame 66: 15250/40642\nReading triggers_091_000_J0154+2706_1.bin... Frame 91: 10655/20453\nReading triggers_074_000_J0154+2706_1.bin... Frame 74: 13139/22727\nReading triggers_129_000_J0154+2706_1.bin... Frame 129: 11026/27644\nReading triggers_164_000_J0154+2706_1.bin... Frame 164: 13731/18744\nReading triggers_058_000_J0154+2706_1.bin... Frame 58: 28268/113006\nReading triggers_147_000_J0154+2706_1.bin... Frame 147: 8715/10321\nReading triggers_163_000_J0154+2706_1.bin... Frame 163: 16692/27502\nReading triggers_063_000_J0154+2706_1.bin... Frame 63: 19239/65766\nReading triggers_131_000_J0154+2706_1.bin... Frame 131: 14185/27568\nReading triggers_187_000_J0154+2706_1.bin... Frame 187: 22569/38268\nReading triggers_001_000_J0154+2706_1.bin... Frame 1: 16258/23323\nReading triggers_075_000_J0154+2706_1.bin... Frame 75: 13374/22863\nReading triggers_002_000_J0154+2706_1.bin... Frame 2: 19019/25287\nReading triggers_204_000_J0154+2706_1.bin... Frame 204: 16244/20967\nReading triggers_005_000_J0154+2706_1.bin... Frame 5: 20565/28894\nReading triggers_198_000_J0154+2706_1.bin... Frame 198: 12896/23195\nReading triggers_140_000_J0154+2706_1.bin... Frame 140: 12201/28702\nReading triggers_128_000_J0154+2706_1.bin... Frame 128: 28354/43979\nReading triggers_188_000_J0154+2706_1.bin... Frame 188: 14069/19071\nReading triggers_079_000_J0154+2706_1.bin... Frame 79: 9647/21067\nReading triggers_044_000_J0154+2706_1.bin... Frame 44: 19454/25459\nReading triggers_118_000_J0154+2706_1.bin... Frame 118: 7177/11786\nReading triggers_195_000_J0154+2706_1.bin... Frame 195: 11244/16600\nReading triggers_041_000_J0154+2706_1.bin... Frame 41: 13505/16568\nReading triggers_123_000_J0154+2706_1.bin... Frame 123: 19189/35112\nReading triggers_057_000_J0154+2706_1.bin... Frame 57: 26405/136897\nReading triggers_106_000_J0154+2706_1.bin... Frame 106: 28089/90068\nReading triggers_207_000_J0154+2706_1.bin... Frame 207: 14298/17108\nReading triggers_190_000_J0154+2706_1.bin... Frame 190: 24976/39798\nReading triggers_199_000_J0154+2706_1.bin... Frame 199: 10825/14307\nReading triggers_021_000_J0154+2706_1.bin... Frame 21: 21062/31870\nReading triggers_051_000_J0154+2706_1.bin... Frame 51: 32053/148466\nReading triggers_153_000_J0154+2706_1.bin... Frame 153: 17958/26136\nReading triggers_004_000_J0154+2706_1.bin... Frame 4: 32965/58003\nReading triggers_159_000_J0154+2706_1.bin... Frame 159: 18799/30658\nReading triggers_125_000_J0154+2706_1.bin... Frame 125: 13853/22953\nReading triggers_132_000_J0154+2706_1.bin... Frame 132: 9116/16824\nReading triggers_167_000_J0154+2706_1.bin... Frame 167: 10366/14077\nReading triggers_023_000_J0154+2706_1.bin... Frame 23: 30762/48433\nReading triggers_183_000_J0154+2706_1.bin... Frame 183: 22550/43246\nReading triggers_120_000_J0154+2706_1.bin... Frame 120: 7671/12633\nReading triggers_197_000_J0154+2706_1.bin... Frame 197: 15657/23986\nReading triggers_087_000_J0154+2706_1.bin... Frame 87: 4580/7618\nReading triggers_148_000_J0154+2706_1.bin... Frame 148: 12294/19698\nReading triggers_116_000_J0154+2706_1.bin... Frame 116: 5102/7457\nReading triggers_061_000_J0154+2706_1.bin... Frame 61: 33001/116930\nReading triggers_089_000_J0154+2706_1.bin... Frame 89: 9472/29583\nReading triggers_160_000_J0154+2706_1.bin... Frame 160: 19104/34216\nReading triggers_012_000_J0154+2706_1.bin... Frame 12: 12069/20261\nReading triggers_157_000_J0154+2706_1.bin... Frame 157: 15953/28418\nReading triggers_136_000_J0154+2706_1.bin... Frame 136: 10848/17265\nReading triggers_068_000_J0154+2706_1.bin... Frame 68: 21157/43332\nReading triggers_115_000_J0154+2706_1.bin... Frame 115: 8311/16111\nReading triggers_210_000_J0154+2706_1.bin... Frame 210: 26596/37238\nReading triggers_014_000_J0154+2706_1.bin... Frame 14: 11475/17309\nReading triggers_003_000_J0154+2706_1.bin... Frame 3: 20306/30310\nReading triggers_077_000_J0154+2706_1.bin... Frame 77: 12905/59221\nReading triggers_176_000_J0154+2706_1.bin... Frame 176: 26268/65780\nReading triggers_110_000_J0154+2706_1.bin... Frame 110: 5381/13017\nReading triggers_015_000_J0154+2706_1.bin... Frame 15: 9253/13996\nReading triggers_169_000_J0154+2706_1.bin... Frame 169: 44430/83664\nReading triggers_047_000_J0154+2706_1.bin... Frame 47: 9216/21530\nReading triggers_149_000_J0154+2706_1.bin... Frame 149: 14636/32072\nReading triggers_145_000_J0154+2706_1.bin... Frame 145: 7953/10547\nReading triggers_082_000_J0154+2706_1.bin... Frame 82: 9759/19030\nReading triggers_024_000_J0154+2706_1.bin... Frame 24: 26444/45609\nReading triggers_093_000_J0154+2706_1.bin... Frame 93: 4030/9100\nReading triggers_150_000_J0154+2706_1.bin... Frame 150: 12250/16337\nReading triggers_114_000_J0154+2706_1.bin... Frame 114: 7470/13938\nReading triggers_080_000_J0154+2706_1.bin... Frame 80: 12001/23822\nReading triggers_177_000_J0154+2706_1.bin... Frame 177: 15090/26795\nReading triggers_117_000_J0154+2706_1.bin... Frame 117: 12307/20300\nReading triggers_175_000_J0154+2706_1.bin... Frame 175: 4524/5422\nReading triggers_062_000_J0154+2706_1.bin... Frame 62: 19430/43939\nReading triggers_205_000_J0154+2706_1.bin... Frame 205: 14109/18186\nReading triggers_138_000_J0154+2706_1.bin... Frame 138: 9164/15275\nReading triggers_121_000_J0154+2706_1.bin... Frame 121: 7055/16649\nReading triggers_013_000_J0154+2706_1.bin... Frame 13: 13437/18421\nReading triggers_053_000_J0154+2706_1.bin... Frame 53: 14543/20233\nReading triggers_154_000_J0154+2706_1.bin... Frame 154: 12496/16592\nReading triggers_018_000_J0154+2706_1.bin... Frame 18: 12559/19815\nReading triggers_042_000_J0154+2706_1.bin... Frame 42: 14353/18348\nReading triggers_011_000_J0154+2706_1.bin... Frame 11: 13332/19033\nReading triggers_185_000_J0154+2706_1.bin... Frame 185: 15324/22440\nReading triggers_105_000_J0154+2706_1.bin... Frame 105: 3828/7795\nReading triggers_144_000_J0154+2706_1.bin... Frame 144: 13529/26921\nReading triggers_191_000_J0154+2706_1.bin... Frame 191: 23632/40532\nReading triggers_065_000_J0154+2706_1.bin... Frame 65: 34496/98915\nReading triggers_209_000_J0154+2706_1.bin... Frame 209: 16456/20729\nReading triggers_045_000_J0154+2706_1.bin... Frame 45: 12352/25900\nReading triggers_130_000_J0154+2706_1.bin... Frame 130: 7874/15641\nReading triggers_161_000_J0154+2706_1.bin... Frame 161: 13463/19649\nReading triggers_181_000_J0154+2706_1.bin... Frame 181: 13530/19242\nReading triggers_022_000_J0154+2706_1.bin... Frame 22: 12618/18092\nReading triggers_141_000_J0154+2706_1.bin... Frame 141: 26407/56758\nReading triggers_173_000_J0154+2706_1.bin... Frame 173: 13824/20601\nReading triggers_137_000_J0154+2706_1.bin... Frame 137: 10673/20096\nReading triggers_206_000_J0154+2706_1.bin... Frame 206: 6985/8183\nReading triggers_056_000_J0154+2706_1.bin... Frame 56: 9745/12755\nReading triggers_184_000_J0154+2706_1.bin... Frame 184: 14660/26148\nReading triggers_072_000_J0154+2706_1.bin... Frame 72: 18750/52603\nReading triggers_078_000_J0154+2706_1.bin... Frame 78: 12204/19397\nReading triggers_007_000_J0154+2706_1.bin... Frame 7: 19871/27320\nReading triggers_059_000_J0154+2706_1.bin... Frame 59: 23289/107891\nReading triggers_162_000_J0154+2706_1.bin... Frame 162: 27353/65940\nReading triggers_170_000_J0154+2706_1.bin... Frame 170: 11087/14251\nReading triggers_180_000_J0154+2706_1.bin... Frame 180: 9352/11327\nReading triggers_124_000_J0154+2706_1.bin... Frame 124: 7468/19457\nReading triggers_189_000_J0154+2706_1.bin... Frame 189: 19688/36281\nReading triggers_168_000_J0154+2706_1.bin... Frame 168: 20320/27800\nReading triggers_119_000_J0154+2706_1.bin... Frame 119: 11197/21976\nReading triggers_203_000_J0154+2706_1.bin... Frame 203: 13601/17558\nReading triggers_108_000_J0154+2706_1.bin... Frame 108: 4874/12027\nReading triggers_142_000_J0154+2706_1.bin... Frame 142: 9806/21425\nReading triggers_171_000_J0154+2706_1.bin... Frame 171: 21826/39658\nReading triggers_165_000_J0154+2706_1.bin... Frame 165: 14057/20140\nReading triggers_094_000_J0154+2706_1.bin... Frame 94: 4326/7880\nReading triggers_158_000_J0154+2706_1.bin... Frame 158: 19553/28134\nReading triggers_174_000_J0154+2706_1.bin... Frame 174: 20472/28609\nReading triggers_016_000_J0154+2706_1.bin... Frame 16: 12721/17353\nReading triggers_071_000_J0154+2706_1.bin... Frame 71: 15500/26422\nReading triggers_133_000_J0154+2706_1.bin... Frame 133: 12714/23266\nReading triggers_088_000_J0154+2706_1.bin... Frame 88: 4691/8545\nReading triggers_196_000_J0154+2706_1.bin... Frame 196: 19311/26083\nReading triggers_006_000_J0154+2706_1.bin... Frame 6: 15138/22097\nReading triggers_208_000_J0154+2706_1.bin... Frame 208: 7803/9154\nReading triggers_084_000_J0154+2706_1.bin... Frame 84: 6187/10823\nReading triggers_083_000_J0154+2706_1.bin... Frame 83: 8113/17695\nReading triggers_155_000_J0154+2706_1.bin... Frame 155: 15076/21385\nReading triggers_143_000_J0154+2706_1.bin... Frame 143: 11628/19918\nReading triggers_135_000_J0154+2706_1.bin... Frame 135: 9137/15006\nReading triggers_107_000_J0154+2706_1.bin... Frame 107: 26982/77757\nReading triggers_172_000_J0154+2706_1.bin... Frame 172: 23742/44957\nReading triggers_092_000_J0154+2706_1.bin... Frame 92: 3740/11404\nReading triggers_054_000_J0154+2706_1.bin... Frame 54: 28481/125688\nReading triggers_017_000_J0154+2706_1.bin... Frame 17: 22677/38941\nReading triggers_073_000_J0154+2706_1.bin... Frame 73: 15433/35465\nReading triggers_067_000_J0154+2706_1.bin... Frame 67: 15925/32033\nReading triggers_010_000_J0154+2706_1.bin... Frame 10: 18828/29511\nReading triggers_113_000_J0154+2706_1.bin... Frame 113: 9137/21032\nReading triggers_008_000_J0154+2706_1.bin... Frame 8: 24052/34056\nReading triggers_152_000_J0154+2706_1.bin... Frame 152: 13927/25378\nReading triggers_146_000_J0154+2706_1.bin... Frame 146: 14085/20278\nReading triggers_086_000_J0154+2706_1.bin... Frame 86: 9693/23688\nReading triggers_182_000_J0154+2706_1.bin... Frame 182: 11481/16302\nReading triggers_139_000_J0154+2706_1.bin... Frame 139: 10928/21291\nReading triggers_134_000_J0154+2706_1.bin... Frame 134: 14389/23714\nReading triggers_050_000_J0154+2706_1.bin... Frame 50: 29735/127712\nReading triggers_111_000_J0154+2706_1.bin... Frame 111: 9733/19731\nReading triggers_201_000_J0154+2706_1.bin... Frame 201: 18172/26948\nReading triggers_112_000_J0154+2706_1.bin... Frame 112: 9651/21172\nReading triggers_095_000_J0154+2706_1.bin... Frame 95: 7536/16646\nReading triggers_156_000_J0154+2706_1.bin... Frame 156: 18557/29548\nReading triggers_109_000_J0154+2706_1.bin... Frame 109: 7876/17800\nReading triggers_019_000_J0154+2706_1.bin... Frame 19: 25890/51813\nReading triggers_060_000_J0154+2706_1.bin... Frame 60: 10356/17781\nReading triggers_046_000_J0154+2706_1.bin... Frame 46: 19287/25444\nReading triggers_076_000_J0154+2706_1.bin... Frame 76: 11102/18072\nReading triggers_166_000_J0154+2706_1.bin... Frame 166: 14167/29895\nReading triggers_202_000_J0154+2706_1.bin... Frame 202: 17350/28904\nReading triggers_052_000_J0154+2706_1.bin... Frame 52: 9601/14333\nReading triggers_127_000_J0154+2706_1.bin... Frame 127: 9316/14658\nReading triggers_151_000_J0154+2706_1.bin... Frame 151: 48093/96198\nReading triggers_193_000_J0154+2706_1.bin... Frame 193: 22411/31960\nReading triggers_070_000_J0154+2706_1.bin... Frame 70: 12978/20700\nReading triggers_179_000_J0154+2706_1.bin... Frame 179: 23480/55171\nReading triggers_081_000_J0154+2706_1.bin... Frame 81: 9145/23443\nReading triggers_126_000_J0154+2706_1.bin... Frame 126: 9155/15582\nReading triggers_122_000_J0154+2706_1.bin... Frame 122: 25245/43311\nReading triggers_192_000_J0154+2706_1.bin... Frame 192: 16635/31789\nReading triggers_069_000_J0154+2706_1.bin... Frame 69: 20628/35691\nReading triggers_020_000_J0154+2706_1.bin... Frame 20: 14195/22248\nReading triggers_049_000_J0154+2706_1.bin... Frame 49: 17332/35069\nReading triggers_200_000_J0154+2706_1.bin... Frame 200: 13238/23902\nReading triggers_048_000_J0154+2706_1.bin... Frame 48: 23554/94544\nReading triggers_009_000_J0154+2706_1.bin... Frame 9: 14132/21967\nReading triggers_085_000_J0154+2706_1.bin... Frame 85: 7641/13944\nReading triggers_194_000_J0154+2706_1.bin... Frame 194: 16616/22392\nReading triggers_043_000_J0154+2706_1.bin... Frame 43: 21511/74531\nTotal number of candidates from all frames: 2838849\nJ0154+2706 0010 687.656250   184   174    1.440594e+00 -1.220905e-09 4.334456e-01 5.040727e-01 2.190372e+02\n\n\n\n\nLast line is printed to \nstderr\n (can be streamed to a \nsummary\n file). The line contains the \ntrigname\n identifier, the \nshift\n value, the \nfpo\n band frequency, the number of files read (184), and the maximum coincidence found (174). Next 5 numbers are arithmetic mean values of the frequency \n$\\,f$\n (in radians), frequency derivative \n$\\,\\dot{f}$\n (spindown), sky positions \n$\\delta$\n and \n$\\alpha$\n, and the mean signal-to-noise ratio, \n$\\widetilde{\\mathrm{snr}}=\\sqrt{\\sum_i \\mathrm{snr}_i^2}$\n. \n\n\nCoincidences above \nmincoin\n are recorded in a binary file \n.coi\n. Each coincidence is a set of following numbers: \n\n$$\nN,\\quad\\bar{f},\\quad\\bar{s},\\quad\\bar{d},\\quad\\bar{a},\\quad\\widetilde{\\mathrm{snr}},\\quad\\mathrm{fr}_{1},\\,\\dots\\,\\mathrm{fr}_{N},\\quad\\mathrm{p}_{1},\\,\\dots\\,\\mathrm{p}_{N}\n$$\n\nwhere \n\n\n\n\n$N$\n is the size of coincidence (written as one \nunsigned short int\n), \n\n\n$\\bar{f}$\n, \n$\\bar{a}$\n, \n$\\bar{d}$\n, \n$\\bar{a}$\n and \n$\\widetilde{\\mathrm{snr}}$\n are the mean parameters of the signal (\n$5\\times$\nfloat\n),\n\n\n$\\mathrm{fr}_{1},\\,\\dots\\,\\mathrm{fr}_{N}$\n are frame numbers (\n$N\\times$\nunsigned short int\n), \n\n\n$\\mathrm{p}_{1},\\,\\dots\\,\\mathrm{p}_{N}$\n are positions of signals that take part in the coincidences, in their corresponding trigger files (\n$N\\times$\nint\n).\n\n\n\n\nThe \nmaster\n branch contains an auxiliary \nread_coi.c\n code that reads the binary \n.coi\n files and prints the output to \nstdout\n.", 
            "title": "Coincidences between candidates"
        }, 
        {
            "location": "/polgraw-allsky/coincidences/#coincidences-between-candidates", 
            "text": "In order to establish the probability of detection of a real gravitational wave, after finding the candidate signals with the  F-statistic candidate signal search , the pipeline searches for coincidences between candidates found in different time frames.   0. Description of how the coincidences are done  Brief description about the idea behind the coincidences  1. Prerequisites  Pascal compiler ( FreePascal ).   2. Compilation  Current version of the coincidence code  coiproc  is written in Pascal \nand is compiled with  FreePascal  v2.6.0. \nIt uses the following auxiliary modules:  gwau ,  cncdu ,  sortdc ,  vsr1unit  and  precalc .  3. How to run the program?  The call is     ./coiproc [options] list_file  where  list_file  is a list of trigger files containing candidates (from one hemisphere). \nAvailable  [options]  are     Option  Description      -scale_f  value  scaling cell in f-direction size by  value    -scale_s  value  scaling cell in s-direction size by  value    -scale_a  value  scaling cell in a-direction size by  value    -scale_d  value  scaling cell in d-direction size by  value    -threshold  value  minimal coincidence number to consider     -f  shift of cells in x1 direction    -s  shift of cells in x2 direction    -a  shift of cells in x3 direction    -d  shift of cells in x4 direction    -nocorrectfreq  do not correct frequency to the reference time frame (default is  68    -refr  value  set the reference time frame to  value    -shift  dddd  set shift in direction  dddd ( d can be 0 or 1) (default  0000    -fpo  value  set  value of the reference band frequency  fpo to  value     4. Example using the VSR1 data  Example call:    ./coiproc sht_016_1.list  where the list  sht_016_1.list  contains the list of candidate (trigger) files. Note that \nthe candidate binary files  pvc_trig_timeframe_band_hemisphere.bin  have different \nnames than the trigger files produced by the  search  code. The original files are vetoed.  \n  ./01/pvc_trig_01_016_1.bin\n  ./02/pvc_trig_02_016_1.bin\n  ./03/pvc_trig_03_016_1.bin\n  ./04/pvc_trig_04_016_1.bin\n  ./08/pvc_trig_08_016_1.bin\n  ./11/pvc_trig_11_016_1.bin\n  ./17/pvc_trig_17_016_1.bin\n  ./26/pvc_trig_26_016_1.bin\n  ./50/pvc_trig_50_016_1.bin\n  ./63/pvc_trig_63_016_1.bin\n  ./67/pvc_trig_67_016_1.bin\n  ./03/pvc_trig_03_017_1.bin\n  ./04/pvc_trig_04_017_1.bin\n  ./08/pvc_trig_08_017_1.bin\n  ./10/pvc_trig_10_017_1.bin\n  ./11/pvc_trig_11_017_1.bin\n  ./15/pvc_trig_15_017_1.bin\n  ./17/pvc_trig_17_017_1.bin\n  ./30/pvc_trig_30_017_1.bin\n  ./32/pvc_trig_32_017_1.bin\n  ./33/pvc_trig_33_017_1.bin\n  ./36/pvc_trig_36_017_1.bin\n  ./37/pvc_trig_37_017_1.bin\n  ./40/pvc_trig_40_017_1.bin\n  ./46/pvc_trig_46_017_1.bin\n  ./47/pvc_trig_47_017_1.bin\n  ./50/pvc_trig_50_017_1.bin\n  ./51/pvc_trig_51_017_1.bin\n  ./52/pvc_trig_52_017_1.bin\n  ./53/pvc_trig_53_017_1.bin\n  ./58/pvc_trig_58_017_1.bin\n  ./60/pvc_trig_60_017_1.bin\n  ./61/pvc_trig_61_017_1.bin  Results are saved into ASCII text files  xxxx_fff_h.resf , where  xxxx  is a\nvector in the  x1-x2-x3-x4  parameter space (for example  1001  means shift in x1\nand x4 directions). An intermediate, auxiliary output file is  xxxx_fff_h.txt . \nThe  0000_016_1.txt  file contains  \n%*   File name                   size\n%   pvc_trig_01_016_1.bin          20888\n%   pvc_trig_02_016_1.bin            262\n%   pvc_trig_03_016_1.bin           2572\n%   pvc_trig_03_017_1.bin           3023\n%   pvc_trig_04_016_1.bin           2248\n%   pvc_trig_04_017_1.bin           3047\n%   pvc_trig_08_016_1.bin           1538\n%   pvc_trig_08_017_1.bin            730\n%   pvc_trig_10_017_1.bin           3626\n%   pvc_trig_11_016_1.bin           3260\n%   pvc_trig_11_017_1.bin           2598\n%   pvc_trig_15_017_1.bin           2672\n%   pvc_trig_17_016_1.bin           2722\n%   pvc_trig_17_017_1.bin           2503\n%   pvc_trig_26_016_1.bin          10449\n%   pvc_trig_30_017_1.bin          10599\n%   pvc_trig_32_017_1.bin           1828\n%   pvc_trig_33_017_1.bin           3896\n%   pvc_trig_36_017_1.bin           2429\n%   pvc_trig_37_017_1.bin           1031\n%   pvc_trig_40_017_1.bin           9049\n%   pvc_trig_46_017_1.bin           7259\n%   pvc_trig_47_017_1.bin           2632\n%   pvc_trig_50_016_1.bin           8982\n%   pvc_trig_50_017_1.bin           6457\n%   pvc_trig_51_017_1.bin           1874\n%   pvc_trig_52_017_1.bin            466\n%   pvc_trig_53_017_1.bin           1023\n%   pvc_trig_58_017_1.bin           3542\n%   pvc_trig_60_017_1.bin           7172\n%   pvc_trig_61_017_1.bin           6163\n%   pvc_trig_63_016_1.bin            904\n%   pvc_trig_67_016_1.bin             36\n% Shift in dimentions = (0, 0, 0, 0)\n% Number of files : 33\n% Correct frequency : TRUE\n% Frequency band (in Hz) [115.50, 116.47]\n% Scaling values = (64.00, 8.00, 4.00, 4.00)\n% Max value = 3\n% Max coincidence/file number = 9.09%\n% Threshold value = 3\n% Statistic of coincidences \n%   term    band  hemsph      in       coinc     unique\n       1      16       1     20888         1     12713\n       2      16       1       262         0       154\n       3      16       1      2572         0      2553\n       3      17       1      3023         0        76\n       4      16       1      2248         0      2071\n       4      17       1      3047         0       146\n       8      16       1      1538         1      1517\n       8      17       1       730         0       111\n      10      17       1      3626         0       210\n      11      16       1      3260         0      1572\n      11      17       1      2598         0       158\n      15      17       1      2672         0       137\n      17      16       1      2722         1      2638\n      17      17       1      2503         0        52\n      26      16       1     10449         2     10181\n      30      17       1     10599         0        66\n      32      17       1      1828         0        15\n      33      17       1      3896         0       126\n      36      17       1      2429         0        91\n      37      17       1      1031         0        35\n      40      17       1      9049         0      1069\n      46      17       1      7259         0       498\n      47      17       1      2632         0       192\n      50      16       1      8982         1      8480\n      50      17       1      6457         0       140\n      51      17       1      1874         0       270\n      52      17       1       466         0         5\n      53      17       1      1023         0        17\n      58      17       1      3542         0        30\n      60      17       1      7172         0       204\n      61      17       1      6163         0       215\n      63      16       1       904         0       834\n      67      16       1        36         0        32  The file  0000_016_1.resf  contains the following (if  -binary  switch is not set):  \n% Shift in dimensions = (0, 0, 0, 0)\n% Number of files : 33\n% Correct frequency : TRUE\n% Scaling value = (64.00, 8.00, 4.00, 4.00)\n% Max value = 3\n% Max coincidence/file number = 9.09%\n% Threshold value = 3\n% Frequency band (in Hz) [115.50, 116.47]\n%     frel      sdnl      decl      ascl    term    band   hmsph    position       SNR     f_corrected\n    -21575     -2835        -1         0       1      16       1        3277       6.10     115.777611\n    -21575     -2835        -1         0      17      16       1        1452       6.21     115.781075\n    -21575     -2835        -1         0      26      16       1        8694       6.33     115.781662\n    -10276     -1349        -1         1       8      16       1         940       6.02     115.629623\n    -10276     -1349        -1         1      26      16       1        5057       6.28     115.628441\n    -10276     -1349        -1         1      50      16       1        5874       6.03     115.626526    The file  0000_016_1.resf  contains the following (if  -binary  switch is set):  \n% Shift in dimensions = (0, 0, 0, 0)\n% Number of files : 33\n% Correct frequency : TRUE\n% Scaling value = (64.00, 8.00, 4.00, 4.00)\n% Max value = 3\n% Max coincidence/file number = 9.09%\n% Threshold value = 3\n% Frequency band (in Hz) [115.50, 116.47]\n% Data of coincidences are in binary file 0000_016_1.coi  Missing: description of  .coi  file format.  5. Programs ran before and after  coiproc  (veto etc.)  6. Coincidences code in  C  (under development)  A version of the coincidences code written in  C , currently in testing phase, is available at  github . To get it, run  git clone https://github.com/mbejger/polgraw-allsky.git .  Prerequisites  The code is written in standard  C . The only dependency is  GNU Scientific Library (GSL) , used to manipulate the Fisher matrix (calculate the eigenvectors and eigenvalues).  GNU struct dirent  objects are used to read the directories.   The idea behind coincidences  After finding the candidate signals in different time frames ( search ), we want to confirm the existence of signals with the same parameters along the span of time segments. to further perform a validation search for high-coincidence, or otherwise interesting candidates (3rd stage, to be done). To do this, the candidates from a list of trigger files (time frames) are read, and for each trigger file   a candidate is transformed to a defined time moment (frequency shifted to a reference frame),   translated into linear (integer) coordinates,   duplicates within each frame are removed,   list of unique candidates from all the frames is created and sorted,   duplicates are counted - these are the coincidences.    [-x----][-x----][-w----][-x----][-----t][-x----][-x----][---f--]\n5 coincidences of x in 8 data segments, not bad...  TODO: describe cell shifts (16 different shifts in total: 0101, 0110, 0010 etc. in f, s, d, a directions) and scaling of cells (used to define the linear parameters for a given cell to subsequently compare the candidate values)    7. Compilation  Run   make coincidences . Resulting binary is called  coincidences . Modify the  Makefile  to fit your system. By default the  YEPPP!  library is selected, but  coincidences  does not need it (select  GNUSINCOS , for example).   8. How to run the program?  Sample call of  coincidences  is as follows (code compiled with the  GNUSINCOS  option):   ./coincidences -data ./triggers_J0154+2706 -trigname J0154+2706 -refloc ./coinc-testdata -fpo 687.656250 -shift 0010 -scale 4844 -refr 100 -dt 2 -mincoin 15 -output results -narrowdown 0.2  8.1. Full list of switches  Type    ./coincidences --help   to obtain the following description:      Switch  Description      -data  Data directory (default is  ./candidates    -output  Output directory (default is  ./coinc-results    -shift  Cell shifts in  fsda directions (4 digit number, e.g.  0101  default  0000    -scale  Cell scaling in  fsda directions (4 digit number, e.g.  4824  default  1111    -refr  Reference frame number    -fpo  Reference band frequency  fpo value    -dt  Data sampling time dt (default value:  0.5    -trigname  Part of triggers name (for identifying files)    -refloc  Location of the reference grid.bin and starting_date files    -mincoin  Minimal number of coincidences recorded    -narrowdown  Narrow-down the frequency band (range [0,1], +- around center)     Also           --help  This help     9. Output  Output to the screen ( stdout ) in the case of    ./coincidences -data ./triggers_J0154+2706 -trigname J0154+2706 -refloc ./coinc-testdata -fpo 687.656250 -shift 0010 -scale 4844 -refr 100 -dt 2 -mincoin 15 -output results -narrowdown 0.2  is  Reading the reference grid.bin at ./coinc-testdata\nfftpad from the grid file: 1\nSettings dt: 2.000000, oms: 8641.343293\nReference frame number: 100\nCell shifts  in f, s, d, a directions: 0 0 1 0 \nCell scaling in f, s, d, a directions: 4 8 4 4\nReading triggers_090_000_J0154+2706_1.bin... Frame 90: 3765/7533\nReading triggers_178_000_J0154+2706_1.bin... Frame 178: 10934/15676\nReading triggers_055_000_J0154+2706_1.bin... Frame 55: 4045/4568\nReading triggers_186_000_J0154+2706_1.bin... Frame 186: 27045/39588\nReading triggers_066_000_J0154+2706_1.bin... Frame 66: 15250/40642\nReading triggers_091_000_J0154+2706_1.bin... Frame 91: 10655/20453\nReading triggers_074_000_J0154+2706_1.bin... Frame 74: 13139/22727\nReading triggers_129_000_J0154+2706_1.bin... Frame 129: 11026/27644\nReading triggers_164_000_J0154+2706_1.bin... Frame 164: 13731/18744\nReading triggers_058_000_J0154+2706_1.bin... Frame 58: 28268/113006\nReading triggers_147_000_J0154+2706_1.bin... Frame 147: 8715/10321\nReading triggers_163_000_J0154+2706_1.bin... Frame 163: 16692/27502\nReading triggers_063_000_J0154+2706_1.bin... Frame 63: 19239/65766\nReading triggers_131_000_J0154+2706_1.bin... Frame 131: 14185/27568\nReading triggers_187_000_J0154+2706_1.bin... Frame 187: 22569/38268\nReading triggers_001_000_J0154+2706_1.bin... Frame 1: 16258/23323\nReading triggers_075_000_J0154+2706_1.bin... Frame 75: 13374/22863\nReading triggers_002_000_J0154+2706_1.bin... Frame 2: 19019/25287\nReading triggers_204_000_J0154+2706_1.bin... Frame 204: 16244/20967\nReading triggers_005_000_J0154+2706_1.bin... Frame 5: 20565/28894\nReading triggers_198_000_J0154+2706_1.bin... Frame 198: 12896/23195\nReading triggers_140_000_J0154+2706_1.bin... Frame 140: 12201/28702\nReading triggers_128_000_J0154+2706_1.bin... Frame 128: 28354/43979\nReading triggers_188_000_J0154+2706_1.bin... Frame 188: 14069/19071\nReading triggers_079_000_J0154+2706_1.bin... Frame 79: 9647/21067\nReading triggers_044_000_J0154+2706_1.bin... Frame 44: 19454/25459\nReading triggers_118_000_J0154+2706_1.bin... Frame 118: 7177/11786\nReading triggers_195_000_J0154+2706_1.bin... Frame 195: 11244/16600\nReading triggers_041_000_J0154+2706_1.bin... Frame 41: 13505/16568\nReading triggers_123_000_J0154+2706_1.bin... Frame 123: 19189/35112\nReading triggers_057_000_J0154+2706_1.bin... Frame 57: 26405/136897\nReading triggers_106_000_J0154+2706_1.bin... Frame 106: 28089/90068\nReading triggers_207_000_J0154+2706_1.bin... Frame 207: 14298/17108\nReading triggers_190_000_J0154+2706_1.bin... Frame 190: 24976/39798\nReading triggers_199_000_J0154+2706_1.bin... Frame 199: 10825/14307\nReading triggers_021_000_J0154+2706_1.bin... Frame 21: 21062/31870\nReading triggers_051_000_J0154+2706_1.bin... Frame 51: 32053/148466\nReading triggers_153_000_J0154+2706_1.bin... Frame 153: 17958/26136\nReading triggers_004_000_J0154+2706_1.bin... Frame 4: 32965/58003\nReading triggers_159_000_J0154+2706_1.bin... Frame 159: 18799/30658\nReading triggers_125_000_J0154+2706_1.bin... Frame 125: 13853/22953\nReading triggers_132_000_J0154+2706_1.bin... Frame 132: 9116/16824\nReading triggers_167_000_J0154+2706_1.bin... Frame 167: 10366/14077\nReading triggers_023_000_J0154+2706_1.bin... Frame 23: 30762/48433\nReading triggers_183_000_J0154+2706_1.bin... Frame 183: 22550/43246\nReading triggers_120_000_J0154+2706_1.bin... Frame 120: 7671/12633\nReading triggers_197_000_J0154+2706_1.bin... Frame 197: 15657/23986\nReading triggers_087_000_J0154+2706_1.bin... Frame 87: 4580/7618\nReading triggers_148_000_J0154+2706_1.bin... Frame 148: 12294/19698\nReading triggers_116_000_J0154+2706_1.bin... Frame 116: 5102/7457\nReading triggers_061_000_J0154+2706_1.bin... Frame 61: 33001/116930\nReading triggers_089_000_J0154+2706_1.bin... Frame 89: 9472/29583\nReading triggers_160_000_J0154+2706_1.bin... Frame 160: 19104/34216\nReading triggers_012_000_J0154+2706_1.bin... Frame 12: 12069/20261\nReading triggers_157_000_J0154+2706_1.bin... Frame 157: 15953/28418\nReading triggers_136_000_J0154+2706_1.bin... Frame 136: 10848/17265\nReading triggers_068_000_J0154+2706_1.bin... Frame 68: 21157/43332\nReading triggers_115_000_J0154+2706_1.bin... Frame 115: 8311/16111\nReading triggers_210_000_J0154+2706_1.bin... Frame 210: 26596/37238\nReading triggers_014_000_J0154+2706_1.bin... Frame 14: 11475/17309\nReading triggers_003_000_J0154+2706_1.bin... Frame 3: 20306/30310\nReading triggers_077_000_J0154+2706_1.bin... Frame 77: 12905/59221\nReading triggers_176_000_J0154+2706_1.bin... Frame 176: 26268/65780\nReading triggers_110_000_J0154+2706_1.bin... Frame 110: 5381/13017\nReading triggers_015_000_J0154+2706_1.bin... Frame 15: 9253/13996\nReading triggers_169_000_J0154+2706_1.bin... Frame 169: 44430/83664\nReading triggers_047_000_J0154+2706_1.bin... Frame 47: 9216/21530\nReading triggers_149_000_J0154+2706_1.bin... Frame 149: 14636/32072\nReading triggers_145_000_J0154+2706_1.bin... Frame 145: 7953/10547\nReading triggers_082_000_J0154+2706_1.bin... Frame 82: 9759/19030\nReading triggers_024_000_J0154+2706_1.bin... Frame 24: 26444/45609\nReading triggers_093_000_J0154+2706_1.bin... Frame 93: 4030/9100\nReading triggers_150_000_J0154+2706_1.bin... Frame 150: 12250/16337\nReading triggers_114_000_J0154+2706_1.bin... Frame 114: 7470/13938\nReading triggers_080_000_J0154+2706_1.bin... Frame 80: 12001/23822\nReading triggers_177_000_J0154+2706_1.bin... Frame 177: 15090/26795\nReading triggers_117_000_J0154+2706_1.bin... Frame 117: 12307/20300\nReading triggers_175_000_J0154+2706_1.bin... Frame 175: 4524/5422\nReading triggers_062_000_J0154+2706_1.bin... Frame 62: 19430/43939\nReading triggers_205_000_J0154+2706_1.bin... Frame 205: 14109/18186\nReading triggers_138_000_J0154+2706_1.bin... Frame 138: 9164/15275\nReading triggers_121_000_J0154+2706_1.bin... Frame 121: 7055/16649\nReading triggers_013_000_J0154+2706_1.bin... Frame 13: 13437/18421\nReading triggers_053_000_J0154+2706_1.bin... Frame 53: 14543/20233\nReading triggers_154_000_J0154+2706_1.bin... Frame 154: 12496/16592\nReading triggers_018_000_J0154+2706_1.bin... Frame 18: 12559/19815\nReading triggers_042_000_J0154+2706_1.bin... Frame 42: 14353/18348\nReading triggers_011_000_J0154+2706_1.bin... Frame 11: 13332/19033\nReading triggers_185_000_J0154+2706_1.bin... Frame 185: 15324/22440\nReading triggers_105_000_J0154+2706_1.bin... Frame 105: 3828/7795\nReading triggers_144_000_J0154+2706_1.bin... Frame 144: 13529/26921\nReading triggers_191_000_J0154+2706_1.bin... Frame 191: 23632/40532\nReading triggers_065_000_J0154+2706_1.bin... Frame 65: 34496/98915\nReading triggers_209_000_J0154+2706_1.bin... Frame 209: 16456/20729\nReading triggers_045_000_J0154+2706_1.bin... Frame 45: 12352/25900\nReading triggers_130_000_J0154+2706_1.bin... Frame 130: 7874/15641\nReading triggers_161_000_J0154+2706_1.bin... Frame 161: 13463/19649\nReading triggers_181_000_J0154+2706_1.bin... Frame 181: 13530/19242\nReading triggers_022_000_J0154+2706_1.bin... Frame 22: 12618/18092\nReading triggers_141_000_J0154+2706_1.bin... Frame 141: 26407/56758\nReading triggers_173_000_J0154+2706_1.bin... Frame 173: 13824/20601\nReading triggers_137_000_J0154+2706_1.bin... Frame 137: 10673/20096\nReading triggers_206_000_J0154+2706_1.bin... Frame 206: 6985/8183\nReading triggers_056_000_J0154+2706_1.bin... Frame 56: 9745/12755\nReading triggers_184_000_J0154+2706_1.bin... Frame 184: 14660/26148\nReading triggers_072_000_J0154+2706_1.bin... Frame 72: 18750/52603\nReading triggers_078_000_J0154+2706_1.bin... Frame 78: 12204/19397\nReading triggers_007_000_J0154+2706_1.bin... Frame 7: 19871/27320\nReading triggers_059_000_J0154+2706_1.bin... Frame 59: 23289/107891\nReading triggers_162_000_J0154+2706_1.bin... Frame 162: 27353/65940\nReading triggers_170_000_J0154+2706_1.bin... Frame 170: 11087/14251\nReading triggers_180_000_J0154+2706_1.bin... Frame 180: 9352/11327\nReading triggers_124_000_J0154+2706_1.bin... Frame 124: 7468/19457\nReading triggers_189_000_J0154+2706_1.bin... Frame 189: 19688/36281\nReading triggers_168_000_J0154+2706_1.bin... Frame 168: 20320/27800\nReading triggers_119_000_J0154+2706_1.bin... Frame 119: 11197/21976\nReading triggers_203_000_J0154+2706_1.bin... Frame 203: 13601/17558\nReading triggers_108_000_J0154+2706_1.bin... Frame 108: 4874/12027\nReading triggers_142_000_J0154+2706_1.bin... Frame 142: 9806/21425\nReading triggers_171_000_J0154+2706_1.bin... Frame 171: 21826/39658\nReading triggers_165_000_J0154+2706_1.bin... Frame 165: 14057/20140\nReading triggers_094_000_J0154+2706_1.bin... Frame 94: 4326/7880\nReading triggers_158_000_J0154+2706_1.bin... Frame 158: 19553/28134\nReading triggers_174_000_J0154+2706_1.bin... Frame 174: 20472/28609\nReading triggers_016_000_J0154+2706_1.bin... Frame 16: 12721/17353\nReading triggers_071_000_J0154+2706_1.bin... Frame 71: 15500/26422\nReading triggers_133_000_J0154+2706_1.bin... Frame 133: 12714/23266\nReading triggers_088_000_J0154+2706_1.bin... Frame 88: 4691/8545\nReading triggers_196_000_J0154+2706_1.bin... Frame 196: 19311/26083\nReading triggers_006_000_J0154+2706_1.bin... Frame 6: 15138/22097\nReading triggers_208_000_J0154+2706_1.bin... Frame 208: 7803/9154\nReading triggers_084_000_J0154+2706_1.bin... Frame 84: 6187/10823\nReading triggers_083_000_J0154+2706_1.bin... Frame 83: 8113/17695\nReading triggers_155_000_J0154+2706_1.bin... Frame 155: 15076/21385\nReading triggers_143_000_J0154+2706_1.bin... Frame 143: 11628/19918\nReading triggers_135_000_J0154+2706_1.bin... Frame 135: 9137/15006\nReading triggers_107_000_J0154+2706_1.bin... Frame 107: 26982/77757\nReading triggers_172_000_J0154+2706_1.bin... Frame 172: 23742/44957\nReading triggers_092_000_J0154+2706_1.bin... Frame 92: 3740/11404\nReading triggers_054_000_J0154+2706_1.bin... Frame 54: 28481/125688\nReading triggers_017_000_J0154+2706_1.bin... Frame 17: 22677/38941\nReading triggers_073_000_J0154+2706_1.bin... Frame 73: 15433/35465\nReading triggers_067_000_J0154+2706_1.bin... Frame 67: 15925/32033\nReading triggers_010_000_J0154+2706_1.bin... Frame 10: 18828/29511\nReading triggers_113_000_J0154+2706_1.bin... Frame 113: 9137/21032\nReading triggers_008_000_J0154+2706_1.bin... Frame 8: 24052/34056\nReading triggers_152_000_J0154+2706_1.bin... Frame 152: 13927/25378\nReading triggers_146_000_J0154+2706_1.bin... Frame 146: 14085/20278\nReading triggers_086_000_J0154+2706_1.bin... Frame 86: 9693/23688\nReading triggers_182_000_J0154+2706_1.bin... Frame 182: 11481/16302\nReading triggers_139_000_J0154+2706_1.bin... Frame 139: 10928/21291\nReading triggers_134_000_J0154+2706_1.bin... Frame 134: 14389/23714\nReading triggers_050_000_J0154+2706_1.bin... Frame 50: 29735/127712\nReading triggers_111_000_J0154+2706_1.bin... Frame 111: 9733/19731\nReading triggers_201_000_J0154+2706_1.bin... Frame 201: 18172/26948\nReading triggers_112_000_J0154+2706_1.bin... Frame 112: 9651/21172\nReading triggers_095_000_J0154+2706_1.bin... Frame 95: 7536/16646\nReading triggers_156_000_J0154+2706_1.bin... Frame 156: 18557/29548\nReading triggers_109_000_J0154+2706_1.bin... Frame 109: 7876/17800\nReading triggers_019_000_J0154+2706_1.bin... Frame 19: 25890/51813\nReading triggers_060_000_J0154+2706_1.bin... Frame 60: 10356/17781\nReading triggers_046_000_J0154+2706_1.bin... Frame 46: 19287/25444\nReading triggers_076_000_J0154+2706_1.bin... Frame 76: 11102/18072\nReading triggers_166_000_J0154+2706_1.bin... Frame 166: 14167/29895\nReading triggers_202_000_J0154+2706_1.bin... Frame 202: 17350/28904\nReading triggers_052_000_J0154+2706_1.bin... Frame 52: 9601/14333\nReading triggers_127_000_J0154+2706_1.bin... Frame 127: 9316/14658\nReading triggers_151_000_J0154+2706_1.bin... Frame 151: 48093/96198\nReading triggers_193_000_J0154+2706_1.bin... Frame 193: 22411/31960\nReading triggers_070_000_J0154+2706_1.bin... Frame 70: 12978/20700\nReading triggers_179_000_J0154+2706_1.bin... Frame 179: 23480/55171\nReading triggers_081_000_J0154+2706_1.bin... Frame 81: 9145/23443\nReading triggers_126_000_J0154+2706_1.bin... Frame 126: 9155/15582\nReading triggers_122_000_J0154+2706_1.bin... Frame 122: 25245/43311\nReading triggers_192_000_J0154+2706_1.bin... Frame 192: 16635/31789\nReading triggers_069_000_J0154+2706_1.bin... Frame 69: 20628/35691\nReading triggers_020_000_J0154+2706_1.bin... Frame 20: 14195/22248\nReading triggers_049_000_J0154+2706_1.bin... Frame 49: 17332/35069\nReading triggers_200_000_J0154+2706_1.bin... Frame 200: 13238/23902\nReading triggers_048_000_J0154+2706_1.bin... Frame 48: 23554/94544\nReading triggers_009_000_J0154+2706_1.bin... Frame 9: 14132/21967\nReading triggers_085_000_J0154+2706_1.bin... Frame 85: 7641/13944\nReading triggers_194_000_J0154+2706_1.bin... Frame 194: 16616/22392\nReading triggers_043_000_J0154+2706_1.bin... Frame 43: 21511/74531\nTotal number of candidates from all frames: 2838849\nJ0154+2706 0010 687.656250   184   174    1.440594e+00 -1.220905e-09 4.334456e-01 5.040727e-01 2.190372e+02  Last line is printed to  stderr  (can be streamed to a  summary  file). The line contains the  trigname  identifier, the  shift  value, the  fpo  band frequency, the number of files read (184), and the maximum coincidence found (174). Next 5 numbers are arithmetic mean values of the frequency  $\\,f$  (in radians), frequency derivative  $\\,\\dot{f}$  (spindown), sky positions  $\\delta$  and  $\\alpha$ , and the mean signal-to-noise ratio,  $\\widetilde{\\mathrm{snr}}=\\sqrt{\\sum_i \\mathrm{snr}_i^2}$ .   Coincidences above  mincoin  are recorded in a binary file  .coi . Each coincidence is a set of following numbers:  $$\nN,\\quad\\bar{f},\\quad\\bar{s},\\quad\\bar{d},\\quad\\bar{a},\\quad\\widetilde{\\mathrm{snr}},\\quad\\mathrm{fr}_{1},\\,\\dots\\,\\mathrm{fr}_{N},\\quad\\mathrm{p}_{1},\\,\\dots\\,\\mathrm{p}_{N}\n$$ \nwhere    $N$  is the size of coincidence (written as one  unsigned short int ),   $\\bar{f}$ ,  $\\bar{a}$ ,  $\\bar{d}$ ,  $\\bar{a}$  and  $\\widetilde{\\mathrm{snr}}$  are the mean parameters of the signal ( $5\\times$ float ),  $\\mathrm{fr}_{1},\\,\\dots\\,\\mathrm{fr}_{N}$  are frame numbers ( $N\\times$ unsigned short int ),   $\\mathrm{p}_{1},\\,\\dots\\,\\mathrm{p}_{N}$  are positions of signals that take part in the coincidences, in their corresponding trigger files ( $N\\times$ int ).   The  master  branch contains an auxiliary  read_coi.c  code that reads the binary  .coi  files and prints the output to  stdout .", 
            "title": "Coincidences between candidates"
        }, 
        {
            "location": "/polgraw-allsky/pipeline_script/", 
            "text": "Pipeline: search for candidate signals and coincidences among them\n\n\n1. Sample PBS/Torque script\n\n\nThis is a sample \npipeline.sh\n script for the spotlight version of the \nsearch\n code, designed to look for signal around a specific location given by the spotlight range data file for 2-day narrow-band data segments. After the candidate signals are found, the search for coincidences is performed. It is currently used in the Mock Data Challenge with injected signals.  \n\n\nThis script uses a lower threshold (option \n-t 10\n) while searching for candidate signals, looks for coincidences in a \n[4 4 4 4]\n cell (see options to \ncoiproc\n) and prepares the summary of the estimation (\nsummary\n file) at the end of execution. The binary files \n*.coi\n - results of coincidences - are archived with the \nlz4.gz\n (\nlz4\n) compression to save space, and deleted after the coincidences procedure is done.  \n\n\n#!/bin/bash \n#PBS -m n \n#PBS -j oe\n#PBS -q medium\n#PBS -l walltime=48:00:00\n\n# Data directory \ndata=/work/psk/bejger/mdc/pulsar-data\n# Candidate (triggers) files output directory \ncandout=/work/psk/bejger/mdc/cand-mdcthr10_$FILENUM\n\n# Directory with coincidence codes \ncoisrc=/work/psk/bejger/mdc/coincidences-codes-binary\n# Coincidences output directory \ncoiout=/work/psk/bejger/mdc/coin-mdcthr10_$FILENUM\n\n# Path to the libraries (in the src/lib directory of the search code)\nldlp=/work/psk/bejger/mdc/spotlight/src/lib/yeppp-1.0.0/binaries/linux/x86_64\n\n# Path to lz4 compressor\nlz4path=/work/psk/bejger/codes/lz4-r131/programs\n\ncd $PBS_O_WORKDIR\n\nwhile read line; do\n\n  # pulsar name and frequency, and band frequency (from pulsar_file_$FILENUM)\n  # the master file is mdc_1561pulsars (name fpo f_gw) \n  name=$(echo $line | awk '{print $1}')\n  fgw=$(echo $line | awk '{print $3}')\n  fpo=$(echo $line | awk '{print $2}')\n\n  #-----------------------\n  # Search for candidates \n  #-----------------------\n  echo $name $(date +%H:%M:%S) \ncandidate search\n \n $PBS_O_WORKDIR/timing_$FILENUM\n\n  # search in frames xxx -- yyy  \n  for i in $(seq -f %03g 1 210); do\n\n    # spotlight file range location \n    spoth1=${data}/${i}/H1/spot_${name}.dat\n    spotl1=${data}/${i}/L1/spot_${name}.dat\n\n    # Here we assume that both H1 and L1 data is present for segment $i, \n    # and take the H1 spotlight file to analyze it. If $spoth1 is not present, \n    # it means there is no good H1 data. We then try $spotl1 as the spotlight file.  \n    # If both $spoth1 and $spotl1 are missing, it means there is no good data \n    # and the code exits (since there is nothing to analyze).\n\n    spotfile=''\n    if [ -f $spoth1 ]; then spotfile=$spoth1 \n    else spotfile=$spotl1\n    fi \n\n    # threshold is set to -threshold 10\n    LD_LIBRARY_PATH=$ldlp ./search -data $data -ident $i -band 000 --nocheckpoint -output $candout -spotlight $spotfile -fpo $fpo -label $name -dt 2 -threshold 10 1\n $name.$PBS_JOBID.out 2\n $name.$PBS_JOBID.err\n\n  done \n\n  #------------------------------------------ \n  # Search for coincidences among candidates \n  #------------------------------------------\n  echo $name $(date +%H:%M:%S) \ncoincidences\n \n $PBS_O_WORKDIR/timing_$FILENUM\n\n\n  mkdir -p $coiout/$name; cd $coiout/$name\n\n  # Copying the trigger files to the working directory \n  cp $candout/triggers*${name}*.bin .\n\n  # Name for the list of files \n  st=$(ls triggers*${name}*.bin | tail -1); listfile=${st: -16:10}'_000'${st: -6:2}'.list';\n  echo \nName for the list of files: \n $listfile \n\n  echo \nRemoving the name of the pulsar from the triggers' files...\n\n  for f in $(ls triggers_*.bin); do mv $f ${f:0:16}${f: -6:6}; done\n\n  echo \nVetoing: processing the triggers' files...\n \n  for f in $(ls triggers_*.bin); do \n    $coisrc/trigveto -noveto -fpo $fpo $f  \n    # Removing original triggers files \n    rm $f \n  done \n\n  echo \nRemoving candidates outside a narrow frequency band (+- 0.05)...\n\n  for f in $(ls pvc_*.bin); do\n    $coisrc/decym $f $fgw 0.05\n  done\n\n  echo \nWriting list of pvc files to \n $listfile \n  ls pvc_*.bin \n $listfile\n\n  echo \nSearching for coincidences...\n \n  for i in {0..1}{0..1}{0..1}{0..1}; do \n    $coisrc/coiproc -binary -refr 100 -scale_f 4 -scale_s 4 -scale_a 4 -scale_d 4 -shift $i -fpo $fpo $listfile \n  done\n\n  echo \nGenerating the stat file...\n \n  st=$(grep \nMax value\n *.resf | sort -gk 5 | tail -1)\n  mcoi=$(echo $st | awk '{print $5}')\n  resf=$(echo $st | awk '{print $1}')\n  resf=${resf:0:10} \n  $coisrc/resf2stat -threshold $mcoi -binary $resf \n\n  echo \nEstimating the parameters...\n\n  $coisrc/stat2data -threshold $mcoi -refr 100 . *.stat\n\n  echo \nPreparing the summary...\n \n  st=$(find . -name \n*.stat.dat\n -printf '%f\\n')\n  if [ -z $st ]; then\n    echo $name $fpo \nno coincidences\n \n ../summary\n  else\n    echo $name $fpo $(wc -l \n $listfile) $(awk 'END{printf \n%20s %.9e %.9e %.9e %.9e %.9e\n,FILENAME,$3,$4,$5,$6,$7}' $st) \n ../summary\n  fi \n\n  # Cleanup (archiving and deleting the coi files) \n  echo $name $(date +%H:%M:%S) \narchiving coi files\n \n $PBS_O_WORKDIR/timing_$FILENUM\n\n  for r in $(ls *.coi); do \n    ${lz4path}/lz4 -6 ${r} ${r}.lz4 \n gzip ${r}.lz4\n    if [ -f ${r}\n.lz4.gz\n ]; then \n      rm $r\n    fi \n  done \n\n  cd $PBS_O_WORKDIR\n\n  echo $name $(date +%H:%M:%S) \nend\n \n $PBS_O_WORKDIR/timing_$FILENUM\n\ndone \n pulsar_file_$FILENUM\n\nexit 0\n\n\n\n\nwhere the \npulsar_file_$FILENUM\n contains 3 columns: pulsar \nname\n, \nfpo\n reference frequency and gravitational wave frequency of the pulsar \nfgw\n. For an exemplary \npulsar_file_666\n, contaning 8 pulsars,  \n\n\nJ0440+6416 516.601562 516.721000\nJ0714-6355 538.630859 538.755400\nJ0424+3800 561.185547 561.302200\nJ0303-5616 1089.595703 1089.719400\nJ0612+3324 390.177734 390.297600\nJ0319-7629 466.138672 466.263800\nJ0803-6214 1700.154297 1700.281800\nJ0534+0935 258.660156 258.781000\n\n\n\n\nthe job can be sent to the PBS queue in the following way:  \n\n\nqsub -v FILENUM=666 -N mdc-666 pipeline.sh", 
            "title": "Pipeline script"
        }, 
        {
            "location": "/polgraw-allsky/pipeline_script/#pipeline-search-for-candidate-signals-and-coincidences-among-them", 
            "text": "1. Sample PBS/Torque script  This is a sample  pipeline.sh  script for the spotlight version of the  search  code, designed to look for signal around a specific location given by the spotlight range data file for 2-day narrow-band data segments. After the candidate signals are found, the search for coincidences is performed. It is currently used in the Mock Data Challenge with injected signals.    This script uses a lower threshold (option  -t 10 ) while searching for candidate signals, looks for coincidences in a  [4 4 4 4]  cell (see options to  coiproc ) and prepares the summary of the estimation ( summary  file) at the end of execution. The binary files  *.coi  - results of coincidences - are archived with the  lz4.gz  ( lz4 ) compression to save space, and deleted after the coincidences procedure is done.    #!/bin/bash \n#PBS -m n \n#PBS -j oe\n#PBS -q medium\n#PBS -l walltime=48:00:00\n\n# Data directory \ndata=/work/psk/bejger/mdc/pulsar-data\n# Candidate (triggers) files output directory \ncandout=/work/psk/bejger/mdc/cand-mdcthr10_$FILENUM\n\n# Directory with coincidence codes \ncoisrc=/work/psk/bejger/mdc/coincidences-codes-binary\n# Coincidences output directory \ncoiout=/work/psk/bejger/mdc/coin-mdcthr10_$FILENUM\n\n# Path to the libraries (in the src/lib directory of the search code)\nldlp=/work/psk/bejger/mdc/spotlight/src/lib/yeppp-1.0.0/binaries/linux/x86_64\n\n# Path to lz4 compressor\nlz4path=/work/psk/bejger/codes/lz4-r131/programs\n\ncd $PBS_O_WORKDIR\n\nwhile read line; do\n\n  # pulsar name and frequency, and band frequency (from pulsar_file_$FILENUM)\n  # the master file is mdc_1561pulsars (name fpo f_gw) \n  name=$(echo $line | awk '{print $1}')\n  fgw=$(echo $line | awk '{print $3}')\n  fpo=$(echo $line | awk '{print $2}')\n\n  #-----------------------\n  # Search for candidates \n  #-----------------------\n  echo $name $(date +%H:%M:%S)  candidate search    $PBS_O_WORKDIR/timing_$FILENUM\n\n  # search in frames xxx -- yyy  \n  for i in $(seq -f %03g 1 210); do\n\n    # spotlight file range location \n    spoth1=${data}/${i}/H1/spot_${name}.dat\n    spotl1=${data}/${i}/L1/spot_${name}.dat\n\n    # Here we assume that both H1 and L1 data is present for segment $i, \n    # and take the H1 spotlight file to analyze it. If $spoth1 is not present, \n    # it means there is no good H1 data. We then try $spotl1 as the spotlight file.  \n    # If both $spoth1 and $spotl1 are missing, it means there is no good data \n    # and the code exits (since there is nothing to analyze).\n\n    spotfile=''\n    if [ -f $spoth1 ]; then spotfile=$spoth1 \n    else spotfile=$spotl1\n    fi \n\n    # threshold is set to -threshold 10\n    LD_LIBRARY_PATH=$ldlp ./search -data $data -ident $i -band 000 --nocheckpoint -output $candout -spotlight $spotfile -fpo $fpo -label $name -dt 2 -threshold 10 1  $name.$PBS_JOBID.out 2  $name.$PBS_JOBID.err\n\n  done \n\n  #------------------------------------------ \n  # Search for coincidences among candidates \n  #------------------------------------------\n  echo $name $(date +%H:%M:%S)  coincidences    $PBS_O_WORKDIR/timing_$FILENUM\n\n\n  mkdir -p $coiout/$name; cd $coiout/$name\n\n  # Copying the trigger files to the working directory \n  cp $candout/triggers*${name}*.bin .\n\n  # Name for the list of files \n  st=$(ls triggers*${name}*.bin | tail -1); listfile=${st: -16:10}'_000'${st: -6:2}'.list';\n  echo  Name for the list of files:   $listfile \n\n  echo  Removing the name of the pulsar from the triggers' files... \n  for f in $(ls triggers_*.bin); do mv $f ${f:0:16}${f: -6:6}; done\n\n  echo  Vetoing: processing the triggers' files...  \n  for f in $(ls triggers_*.bin); do \n    $coisrc/trigveto -noveto -fpo $fpo $f  \n    # Removing original triggers files \n    rm $f \n  done \n\n  echo  Removing candidates outside a narrow frequency band (+- 0.05)... \n  for f in $(ls pvc_*.bin); do\n    $coisrc/decym $f $fgw 0.05\n  done\n\n  echo  Writing list of pvc files to   $listfile \n  ls pvc_*.bin   $listfile\n\n  echo  Searching for coincidences...  \n  for i in {0..1}{0..1}{0..1}{0..1}; do \n    $coisrc/coiproc -binary -refr 100 -scale_f 4 -scale_s 4 -scale_a 4 -scale_d 4 -shift $i -fpo $fpo $listfile \n  done\n\n  echo  Generating the stat file...  \n  st=$(grep  Max value  *.resf | sort -gk 5 | tail -1)\n  mcoi=$(echo $st | awk '{print $5}')\n  resf=$(echo $st | awk '{print $1}')\n  resf=${resf:0:10} \n  $coisrc/resf2stat -threshold $mcoi -binary $resf \n\n  echo  Estimating the parameters... \n  $coisrc/stat2data -threshold $mcoi -refr 100 . *.stat\n\n  echo  Preparing the summary...  \n  st=$(find . -name  *.stat.dat  -printf '%f\\n')\n  if [ -z $st ]; then\n    echo $name $fpo  no coincidences    ../summary\n  else\n    echo $name $fpo $(wc -l   $listfile) $(awk 'END{printf  %20s %.9e %.9e %.9e %.9e %.9e ,FILENAME,$3,$4,$5,$6,$7}' $st)   ../summary\n  fi \n\n  # Cleanup (archiving and deleting the coi files) \n  echo $name $(date +%H:%M:%S)  archiving coi files    $PBS_O_WORKDIR/timing_$FILENUM\n\n  for r in $(ls *.coi); do \n    ${lz4path}/lz4 -6 ${r} ${r}.lz4   gzip ${r}.lz4\n    if [ -f ${r} .lz4.gz  ]; then \n      rm $r\n    fi \n  done \n\n  cd $PBS_O_WORKDIR\n\n  echo $name $(date +%H:%M:%S)  end    $PBS_O_WORKDIR/timing_$FILENUM\n\ndone   pulsar_file_$FILENUM\n\nexit 0  where the  pulsar_file_$FILENUM  contains 3 columns: pulsar  name ,  fpo  reference frequency and gravitational wave frequency of the pulsar  fgw . For an exemplary  pulsar_file_666 , contaning 8 pulsars,    J0440+6416 516.601562 516.721000\nJ0714-6355 538.630859 538.755400\nJ0424+3800 561.185547 561.302200\nJ0303-5616 1089.595703 1089.719400\nJ0612+3324 390.177734 390.297600\nJ0319-7629 466.138672 466.263800\nJ0803-6214 1700.154297 1700.281800\nJ0534+0935 258.660156 258.781000  the job can be sent to the PBS queue in the following way:    qsub -v FILENUM=666 -N mdc-666 pipeline.sh", 
            "title": "Pipeline: search for candidate signals and coincidences among them"
        }, 
        {
            "location": "/polgraw-allsky/articles/", 
            "text": "List of documents and publications\n\n\nArticles\n\n\n\n\nData analysis of gravitational-wave signals from spinning neutron stars: The signal and its detection\n \n(arXiv)\n\n\nData analysis of gravitational-wave signals from spinning neutron stars. II. Accuracy of estimation of parameters\n \n(arXiv)\n\n\nData analysis of gravitational-wave signals from spinning neutron stars. III. Detection statistics and computational requirements\n \n(arXiv)\n\n\nData analysis of gravitational-wave signals from spinning neutron stars. IV. An all-sky search\n \n(arXiv)\n\n\nData analysis of gravitational-wave signals from spinning neutron stars. V. A narrow-band all-sky search\n \n(arXiv)\n\n\nImplementation of an F-statistic all-sky search for continuous gravitational waves in Virgo VSR1 data\n \n(arXiv)\n\n\n\n\nResonant bar detectors\n\n\n\n\nAll-sky search of NAUTILUS data\n \n(arXiv)\n\n\nAll-sky upper limit for gravitational radiation from spinning neutron stars\n \n(arXiv)\n\n\n\n\nMonographs\n\n\n\n\nGravitational-Wave Data Analysis. Formalism and Sample Applications: The Gaussian Case\n\n\nAnalysis of Gravitational-Wave Data", 
            "title": "Literature"
        }, 
        {
            "location": "/polgraw-allsky/articles/#list-of-documents-and-publications", 
            "text": "Articles   Data analysis of gravitational-wave signals from spinning neutron stars: The signal and its detection   (arXiv)  Data analysis of gravitational-wave signals from spinning neutron stars. II. Accuracy of estimation of parameters   (arXiv)  Data analysis of gravitational-wave signals from spinning neutron stars. III. Detection statistics and computational requirements   (arXiv)  Data analysis of gravitational-wave signals from spinning neutron stars. IV. An all-sky search   (arXiv)  Data analysis of gravitational-wave signals from spinning neutron stars. V. A narrow-band all-sky search   (arXiv)  Implementation of an F-statistic all-sky search for continuous gravitational waves in Virgo VSR1 data   (arXiv)   Resonant bar detectors   All-sky search of NAUTILUS data   (arXiv)  All-sky upper limit for gravitational radiation from spinning neutron stars   (arXiv)   Monographs   Gravitational-Wave Data Analysis. Formalism and Sample Applications: The Gaussian Case  Analysis of Gravitational-Wave Data", 
            "title": "List of documents and publications"
        }
    ]
}